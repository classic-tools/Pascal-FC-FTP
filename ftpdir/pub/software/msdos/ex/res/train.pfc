program trains;
  const capacity = 10; (* very small train *)

  resource st1depart;
    export alight, stopping, alloff;
    var OnTrain : integer;
	    trainstopping : boolean;
    guarded procedure alight(source : integer) when trainstopping;
    begin
      OnTrain := OnTrain - 1;
      writeln('Arrived at station1 from',source)
    end;
    procedure stopping(passengers : integer);
    begin
      OnTrain := passengers;
      trainstopping := true
    end;
    procedure alloff(var passengers : integer);
    begin
      trainstopping := false;
      passengers := OnTrain
    end;
  begin (* station1 *)
    trainstopping := false
  end;

  resource st2depart;
    export alight, stopping, alloff;
    var OnTrain : integer;
	    trainstopping : boolean;
    guarded procedure alight(source : integer) when trainstopping;
    begin
      OnTrain := OnTrain - 1;
      writeln('Arrived at station2 from',source)
    end;
    procedure stopping(passengers : integer);
    begin
      OnTrain := passengers;
      trainstopping := true
    end;
    procedure alloff(var passengers : integer);
    begin
      trainstopping := false;
      passengers := OnTrain
    end;
  begin (* station2 *)
    trainstopping := false
  end;

  resource st3depart;
    export alight, stopping, alloff;
    var OnTrain : integer;
	    trainstopping : boolean;
    guarded procedure alight(source : integer) when trainstopping;
    begin
      OnTrain := OnTrain - 1;
      writeln('Arrived at station3 from',source)
    end;
    procedure stopping(passengers : integer);
    begin
      OnTrain := passengers;
      trainstopping := true
    end;
    procedure alloff(var passengers : integer);
    begin
      trainstopping := false;
      passengers := OnTrain
    end;
  begin (* station1 *)
    trainstopping := false
  end;

  resource st4depart;
    export alight, stopping, alloff;
    var OnTrain : integer;
	    trainstopping : boolean;
    guarded procedure alight(source : integer) when trainstopping;
    begin
      OnTrain := OnTrain - 1;
      writeln('Arrived at station4 from',source)
    end;
    procedure stopping(passengers : integer);
    begin
      OnTrain := passengers;
      trainstopping := true
    end;
    procedure alloff(var passengers : integer);
    begin
      trainstopping := false;
      passengers := OnTrain
    end;
  begin (* station4 *)
    trainstopping := false
  end;

  resource st1arrive;
    export arrive, boarding, closedoors;
	var OnTrain : integer;
	    trainboarding : boolean;
    guarded procedure arrive(destination : integer)
      when trainboarding and (OnTrain < capacity);
    begin
      OnTrain := OnTrain + 1;
      case destination of
        1 : requeue st1depart.alight(1);
        2 : requeue st2depart.alight(1);
        3 : requeue st3depart.alight(1);
        4 : requeue st4depart.alight(1)
      end
    end;
    procedure boarding(passengers : integer);
    begin
      OnTrain := passengers;
      trainboarding := true
    end;
    procedure closedoors(var passengers : integer);
    begin
      trainboarding := false;
      passengers := OnTrain
    end;
  begin (* station1 *)
    trainboarding := false
  end;

  resource st2arrive;
    export arrive, boarding, closedoors;
	var OnTrain : integer;
	    trainboarding : boolean;
    guarded procedure arrive(destination : integer)
      when trainboarding and (OnTrain < capacity);
    begin
      OnTrain := OnTrain + 1;
      case destination of
        1 : requeue st1depart.alight(2);
        2 : requeue st2depart.alight(2);
        3 : requeue st3depart.alight(2);
        4 : requeue st4depart.alight(2)
      end
    end;
    procedure boarding(passengers : integer);
    begin
      OnTrain := passengers;
      trainboarding := true
    end;
    procedure closedoors(var passengers : integer);
    begin
      trainboarding := false;
      passengers := OnTrain
    end;
  begin (* station2 *)
    trainboarding := false
  end;

  resource st3arrive;
    export arrive, boarding, closedoors;
	var OnTrain : integer;
	    trainboarding : boolean;
    guarded procedure arrive(destination : integer)
      when trainboarding and (OnTrain < capacity);
    begin
      OnTrain := OnTrain + 1;
      case destination of
        1 : requeue st1depart.alight(3);
        2 : requeue st2depart.alight(3);
        3 : requeue st3depart.alight(3);
        4 : requeue st4depart.alight(3)
      end
    end;
    procedure boarding(passengers : integer);
    begin
      OnTrain := passengers;
      trainboarding := true
    end;
    procedure closedoors(var passengers : integer);
    begin
      trainboarding := false;
      passengers := OnTrain
    end;
  begin (* station3 *)
    trainboarding := false
  end;

  resource st4arrive;
    export arrive, boarding, closedoors;
	var OnTrain : integer;
	    trainboarding : boolean;
    guarded procedure arrive(destination : integer)
      when trainboarding and (OnTrain < capacity);
    begin
      OnTrain := OnTrain + 1;
      case destination of
        1 : requeue st1depart.alight(4);
        2 : requeue st2depart.alight(4);
        3 : requeue st3depart.alight(4);
        4 : requeue st4depart.alight(4)
      end
    end;
    procedure boarding(passengers : integer);
    begin
      OnTrain := passengers;
      trainboarding := true
    end;
    procedure closedoors(var passengers : integer);
    begin
      trainboarding := false;
      passengers := OnTrain
    end;
  begin (* station4 *)
    trainboarding := false
  end;

process type passenger;
  var home, away : integer;
begin
  repeat
    home := 1;  (*random(3) + 1;*)
    away := 2;  (*random(3) + 1;*)
    case home of
      1 : st1arrive.arrive(away);
      2 : st2arrive.arrive(away);
      3 : st3arrive.arrive(away);
      4 : st4arrive.arrive(away)
    end
  forever
end;

process train;
  var volume : integer;
begin
  volume := 0;
  repeat
    st1depart.stopping(volume);
    st1depart.alloff(volume);
    st1arrive.boarding(volume);
    st1arrive.closedoors(volume);
    writeln('on board',volume);

    st2depart.stopping(volume);
    st2depart.alloff(volume);
    st2arrive.boarding(volume);
    st2arrive.closedoors(volume);
    writeln('on board',volume);

    st3depart.stopping(volume);
    st3depart.alloff(volume);
    st3arrive.boarding(volume);
    st3arrive.closedoors(volume);
    writeln('on board',volume);

    st4depart.stopping(volume);
    st4depart.alloff(volume);
    st4arrive.boarding(volume);
    st4arrive.closedoors(volume);
    writeln('on board',volume)
  forever
end;

var crowd : array[1..15] of passenger;
    P : integer;

begin
  writeln('starting to run');
  cobegin
    for P := 1 to 1 do
      crowd[P];
    train
  coend
end.
